"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBansFromSite = exports.getAddedAdmins = exports.getModsTransferringCommunities = exports.getModsAddedToCommunities = exports.getBansFromCommunities = exports.getRemovedCommunities = exports.getRemovedComments = exports.getFeaturedPosts = exports.getLockedPosts = exports.getRemovedPosts = exports.createLockPost = exports.createSearch = exports.createFeaturePost = exports.createResolvePrivateMessageReport = exports.createResolveCommentReport = exports.createResolvePostReport = exports.getPrivateMessageReports = exports.getCommentReports = exports.getPostReports = exports.markReplyAsRead = exports.getReplies = exports.markMentionAsRead = exports.getMentions = exports.createRemoveComment = exports.createRemovePost = exports.createApplicationApproval = exports.getRegistrationApplications = exports.createPrivateMessageReport = exports.createPrivateMessage = exports.markPrivateMessageAsRead = exports.getPrivateMessages = exports.createBanFromSite = exports.createBanFromCommunity = exports.followCommunity = exports.createCommentReport = exports.createComment = exports.getComments = exports.getComment = exports.createPostReport = exports.createPost = exports.getPosts = exports.getPost = exports.voteDBComment = exports.voteDBPost = exports.enableBotAccount = exports.logIn = void 0;
const lemmy_js_client_1 = require("lemmy-js-client");
const helpers_1 = require("./helpers");
const client = new lemmy_js_client_1.LemmyWebsocket();
const logIn = ({ connection, username, password }) => {
    const request = client.login({
        username_or_email: username,
        password
    });
    connection.send(request);
};
exports.logIn = logIn;
const enableBotAccount = ({ connection, auth }) => {
    const request = client.saveUserSettings({
        auth,
        bot_account: true
    });
    connection.send(request);
};
exports.enableBotAccount = enableBotAccount;
const voteDBPost = ({ connection, id, auth, vote }) => {
    const request = client.likePost({
        auth,
        post_id: id,
        score: vote
    });
    connection.send(request);
};
exports.voteDBPost = voteDBPost;
const voteDBComment = ({ connection, id, auth, vote }) => {
    const request = client.likeComment({
        auth,
        comment_id: id,
        score: vote
    });
    connection.send(request);
};
exports.voteDBComment = voteDBComment;
const getPost = ({ connection, id, auth }) => {
    const request = client.getPost({ auth, id });
    connection.send(request);
};
exports.getPost = getPost;
const getPosts = ({ connection, listingType, auth, sort = 'New' }) => {
    const request = client.getPosts({
        sort,
        limit: 50,
        auth,
        type_: listingType
    });
    connection.send(request);
};
exports.getPosts = getPosts;
const createPost = (connection, _a) => {
    var { communityId, languageId } = _a, rest = __rest(_a, ["communityId", "languageId"]);
    const request = client.createPost(Object.assign({ community_id: communityId, language_id: languageId }, rest));
    connection.send(request);
};
exports.createPost = createPost;
const createPostReport = ({ connection, auth, id, reason }) => {
    const request = client.createPostReport({
        auth,
        post_id: id,
        reason
    });
    connection.send(request);
};
exports.createPostReport = createPostReport;
const getComment = ({ connection, auth, id }) => {
    const request = client.getComment({ id, auth });
    connection.send(request);
};
exports.getComment = getComment;
const getComments = ({ connection, listingType, auth, sort = 'New', postId }) => {
    const request = client.getComments({
        sort,
        limit: 50,
        auth,
        type_: listingType,
        post_id: postId,
        max_depth: postId ? 100 : undefined
    });
    connection.send(request);
};
exports.getComments = getComments;
const createComment = ({ connection, auth, postId, parentId, content, languageId }) => {
    const request = client.createComment({
        auth,
        content,
        post_id: postId,
        parent_id: parentId,
        language_id: languageId
    });
    connection.send(request);
};
exports.createComment = createComment;
const createCommentReport = ({ auth, id, reason, connection }) => {
    const request = client.createCommentReport({
        auth,
        comment_id: id,
        reason
    });
    connection.send(request);
};
exports.createCommentReport = createCommentReport;
const followCommunity = ({ connection, auth, communityId }) => {
    const request = client.followCommunity({
        auth,
        community_id: communityId,
        follow: true
    });
    connection.send(request);
};
exports.followCommunity = followCommunity;
const createBanFromCommunity = ({ communityId, auth, connection, personId, daysUntilExpires, reason, removeData }) => {
    const expires = (0, helpers_1.futureDaysToUnixTime)(daysUntilExpires);
    const request = client.banFromCommunity({
        auth,
        ban: true,
        community_id: communityId,
        person_id: personId,
        expires,
        reason,
        remove_data: removeData
    });
    connection.send(request);
};
exports.createBanFromCommunity = createBanFromCommunity;
const createBanFromSite = ({ auth, connection, personId, daysUntilExpires, reason, removeData }) => {
    const expires = (0, helpers_1.futureDaysToUnixTime)(daysUntilExpires);
    const request = client.banPerson({
        auth,
        ban: true,
        person_id: personId,
        expires,
        reason,
        remove_data: removeData
    });
    connection.send(request);
};
exports.createBanFromSite = createBanFromSite;
const getPrivateMessages = (connection, auth) => {
    const request = client.getPrivateMessages({
        auth: auth !== null && auth !== void 0 ? auth : '',
        limit: 50,
        unread_only: true
    });
    connection.send(request);
};
exports.getPrivateMessages = getPrivateMessages;
const markPrivateMessageAsRead = ({ auth, connection, id }) => {
    const request = client.markPrivateMessageAsRead({
        auth,
        private_message_id: id,
        read: true
    });
    connection.send(request);
};
exports.markPrivateMessageAsRead = markPrivateMessageAsRead;
const createPrivateMessage = ({ connection, auth, recipientId, content }) => {
    const request = client.createPrivateMessage({
        auth,
        content,
        recipient_id: recipientId
    });
    connection.send(request);
};
exports.createPrivateMessage = createPrivateMessage;
const createPrivateMessageReport = ({ id, connection, auth, reason }) => {
    const request = client.createPrivateMessageReport({
        auth,
        private_message_id: id,
        reason
    });
    connection.send(request);
};
exports.createPrivateMessageReport = createPrivateMessageReport;
const getRegistrationApplications = (connection, auth) => {
    const request = client.listRegistrationApplications({
        unread_only: true,
        limit: 50,
        auth: auth !== null && auth !== void 0 ? auth : ''
    });
    connection.send(request);
};
exports.getRegistrationApplications = getRegistrationApplications;
const createApplicationApproval = ({ connection, auth, id, approve, denyReason }) => {
    const request = client.approveRegistrationApplication({
        approve,
        auth,
        id,
        deny_reason: denyReason
    });
    connection.send(request);
};
exports.createApplicationApproval = createApplicationApproval;
const createRemovePost = ({ auth, connection, id, reason, removed }) => {
    const request = client.removePost({ auth, post_id: id, reason, removed });
    connection.send(request);
};
exports.createRemovePost = createRemovePost;
const createRemoveComment = ({ connection, auth, id, removed, reason }) => {
    const request = client.removeComment({
        auth,
        comment_id: id,
        removed,
        reason
    });
    connection.send(request);
};
exports.createRemoveComment = createRemoveComment;
const getMentions = (connection, auth) => {
    const request = client.getPersonMentions({
        auth: auth !== null && auth !== void 0 ? auth : '',
        limit: 50,
        unread_only: true,
        sort: 'New'
    });
    connection.send(request);
};
exports.getMentions = getMentions;
const markMentionAsRead = ({ connection, auth, id }) => {
    const request = client.markPersonMentionAsRead({
        auth,
        person_mention_id: id,
        read: true
    });
    connection.send(request);
};
exports.markMentionAsRead = markMentionAsRead;
const getReplies = (connection, auth) => {
    const request = client.getReplies({
        auth: auth !== null && auth !== void 0 ? auth : '',
        limit: 50,
        sort: 'New',
        unread_only: true
    });
    connection.send(request);
};
exports.getReplies = getReplies;
const markReplyAsRead = ({ auth, connection, id }) => {
    const request = client.markCommentReplyAsRead({
        auth,
        comment_reply_id: id,
        read: true
    });
    connection.send(request);
};
exports.markReplyAsRead = markReplyAsRead;
const getPostReports = (connection, auth) => {
    const request = client.listPostReports({
        unresolved_only: true,
        auth: auth !== null && auth !== void 0 ? auth : '',
        limit: 50
    });
    connection.send(request);
};
exports.getPostReports = getPostReports;
const getCommentReports = (connection, auth) => {
    const request = client.listCommentReports({
        unresolved_only: true,
        auth: auth !== null && auth !== void 0 ? auth : '',
        limit: 50
    });
    connection.send(request);
};
exports.getCommentReports = getCommentReports;
const getPrivateMessageReports = (connection, auth) => {
    const request = client.listPrivateMessageReports({
        auth: auth !== null && auth !== void 0 ? auth : '',
        limit: 50,
        unresolved_only: true
    });
    connection.send(request);
};
exports.getPrivateMessageReports = getPrivateMessageReports;
const createResolvePostReport = ({ connection, auth, id }) => {
    const request = client.resolvePostReport({
        resolved: true,
        auth,
        report_id: id
    });
    connection.send(request);
};
exports.createResolvePostReport = createResolvePostReport;
const createResolveCommentReport = ({ connection, auth, id }) => {
    const request = client.resolveCommentReport({
        auth,
        report_id: id,
        resolved: true
    });
    connection.send(request);
};
exports.createResolveCommentReport = createResolveCommentReport;
const createResolvePrivateMessageReport = ({ connection, auth, id }) => {
    const request = client.resolvePrivateMessageReport({
        auth,
        report_id: id,
        resolved: true
    });
    connection.send(request);
};
exports.createResolvePrivateMessageReport = createResolvePrivateMessageReport;
const createFeaturePost = ({ auth, connection, featured, featureType, id }) => {
    const request = client.featurePost({
        auth,
        feature_type: featureType,
        featured,
        post_id: id
    });
    connection.send(request);
};
exports.createFeaturePost = createFeaturePost;
const createSearch = ({ connection, query, type, auth }) => {
    const request = client.search({
        sort: 'TopAll',
        q: query,
        auth,
        limit: 50,
        type_: type,
        listing_type: 'All'
    });
    connection.send(request);
};
exports.createSearch = createSearch;
const createLockPost = ({ auth, connection, id, locked }) => {
    const request = client.lockPost({ auth, locked, post_id: id });
    connection.send(request);
};
exports.createLockPost = createLockPost;
const getModlogItems = (connection, type, auth) => {
    const request = client.getModlog({
        type_: type,
        limit: 50,
        auth
    });
    connection.send(request);
};
const getRemovedPosts = (connection, auth) => getModlogItems(connection, 'ModRemovePost', auth);
exports.getRemovedPosts = getRemovedPosts;
const getLockedPosts = (connection, auth) => getModlogItems(connection, 'ModLockPost', auth);
exports.getLockedPosts = getLockedPosts;
const getFeaturedPosts = (connection, auth) => getModlogItems(connection, 'ModFeaturePost', auth);
exports.getFeaturedPosts = getFeaturedPosts;
const getRemovedComments = (connection, auth) => getModlogItems(connection, 'ModRemoveComment', auth);
exports.getRemovedComments = getRemovedComments;
const getRemovedCommunities = (connection, auth) => getModlogItems(connection, 'ModRemoveCommunity', auth);
exports.getRemovedCommunities = getRemovedCommunities;
const getBansFromCommunities = (connection, auth) => getModlogItems(connection, 'ModBanFromCommunity', auth);
exports.getBansFromCommunities = getBansFromCommunities;
const getModsAddedToCommunities = (connection, auth) => getModlogItems(connection, 'ModAddCommunity', auth);
exports.getModsAddedToCommunities = getModsAddedToCommunities;
const getModsTransferringCommunities = (connection, auth) => getModlogItems(connection, 'ModTransferCommunity', auth);
exports.getModsTransferringCommunities = getModsTransferringCommunities;
const getAddedAdmins = (connection, auth) => getModlogItems(connection, 'ModAdd', auth);
exports.getAddedAdmins = getAddedAdmins;
const getBansFromSite = (connection, auth) => getModlogItems(connection, 'ModBan', auth);
exports.getBansFromSite = getBansFromSite;
