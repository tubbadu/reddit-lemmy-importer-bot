import { CommentSortType, ListingType, PostFeatureType, SearchType, SortType } from 'lemmy-js-client';
import { connection as Connection } from 'websocket';
import { Vote, CreatePost } from './types';
export declare const logIn: ({ connection, username, password }: {
    connection: Connection;
    username: string;
    password: string;
}) => void;
export declare const enableBotAccount: ({ connection, auth }: {
    connection: Connection;
    auth: string;
}) => void;
export declare const voteDBPost: ({ connection, id, auth, vote }: {
    connection: Connection;
    id: number;
    auth: string;
    vote: Vote;
}) => void;
export declare const voteDBComment: ({ connection, id, auth, vote }: {
    connection: Connection;
    id: number;
    auth: string;
    vote: Vote;
}) => void;
export declare const getPost: ({ connection, id, auth }: {
    connection: Connection;
    auth?: string | undefined;
    id: number;
}) => void;
export declare const getPosts: ({ connection, listingType, auth, sort }: {
    connection: Connection;
    listingType: ListingType;
    auth?: string | undefined;
    sort?: SortType | undefined;
}) => void;
export declare const createPost: (connection: Connection, { communityId, languageId, ...rest }: CreatePost & {
    auth: string;
}) => void;
export declare const createPostReport: ({ connection, auth, id, reason }: {
    connection: Connection;
    auth: string;
    id: number;
    reason: string;
}) => void;
export declare const getComment: ({ connection, auth, id }: {
    connection: Connection;
    auth?: string | undefined;
    id: number;
}) => void;
export declare const getComments: ({ connection, listingType, auth, sort, postId }: {
    connection: Connection;
    listingType: ListingType;
    auth?: string | undefined;
    sort?: CommentSortType | undefined;
    postId?: number | undefined;
}) => void;
export declare const createComment: ({ connection, auth, postId, parentId, content, languageId }: {
    connection: Connection;
    auth: string;
    postId: number;
    parentId?: number | undefined;
    content: string;
    languageId?: number | undefined;
}) => void;
export declare const createCommentReport: ({ auth, id, reason, connection }: {
    auth: string;
    id: number;
    reason: string;
    connection: Connection;
}) => void;
export declare const followCommunity: ({ connection, auth, communityId }: {
    connection: Connection;
    auth: string;
    communityId: number;
}) => void;
export declare const createBanFromCommunity: ({ communityId, auth, connection, personId, daysUntilExpires, reason, removeData }: {
    connection: Connection;
    auth: string;
    communityId: number;
    personId: number;
    daysUntilExpires?: number | undefined;
    reason?: string | undefined;
    removeData?: boolean | undefined;
}) => void;
export declare const createBanFromSite: ({ auth, connection, personId, daysUntilExpires, reason, removeData }: {
    connection: Connection;
    auth: string;
    personId: number;
    daysUntilExpires?: number | undefined;
    reason?: string | undefined;
    removeData?: boolean | undefined;
}) => void;
export declare const getPrivateMessages: (connection: Connection, auth?: string) => void;
export declare const markPrivateMessageAsRead: ({ auth, connection, id }: {
    connection: Connection;
    auth: string;
    id: number;
}) => void;
export declare const createPrivateMessage: ({ connection, auth, recipientId, content }: {
    connection: Connection;
    auth: string;
    recipientId: number;
    content: string;
}) => void;
export declare const createPrivateMessageReport: ({ id, connection, auth, reason }: {
    id: number;
    connection: Connection;
    auth: string;
    reason: string;
}) => void;
export declare const getRegistrationApplications: (connection: Connection, auth?: string) => void;
export declare const createApplicationApproval: ({ connection, auth, id, approve, denyReason }: {
    connection: Connection;
    auth: string;
    id: number;
    approve: boolean;
    denyReason?: string | undefined;
}) => void;
export declare const createRemovePost: ({ auth, connection, id, reason, removed }: {
    connection: Connection;
    auth: string;
    id: number;
    reason?: string | undefined;
    removed: boolean;
}) => void;
export declare const createRemoveComment: ({ connection, auth, id, removed, reason }: {
    connection: Connection;
    auth: string;
    id: number;
    reason?: string | undefined;
    removed: boolean;
}) => void;
export declare const getMentions: (connection: Connection, auth?: string) => void;
export declare const markMentionAsRead: ({ connection, auth, id }: {
    connection: Connection;
    auth: string;
    id: number;
}) => void;
export declare const getReplies: (connection: Connection, auth?: string) => void;
export declare const markReplyAsRead: ({ auth, connection, id }: {
    connection: Connection;
    auth: string;
    id: number;
}) => void;
export declare const getPostReports: (connection: Connection, auth?: string) => void;
export declare const getCommentReports: (connection: Connection, auth?: string) => void;
export declare const getPrivateMessageReports: (connection: Connection, auth?: string) => void;
export declare const createResolvePostReport: ({ connection, auth, id }: {
    connection: Connection;
    auth: string;
    id: number;
}) => void;
export declare const createResolveCommentReport: ({ connection, auth, id }: {
    connection: Connection;
    auth: string;
    id: number;
}) => void;
export declare const createResolvePrivateMessageReport: ({ connection, auth, id }: {
    connection: Connection;
    auth: string;
    id: number;
}) => void;
export declare const createFeaturePost: ({ auth, connection, featured, featureType, id }: {
    connection: Connection;
    auth: string;
    featureType: PostFeatureType;
    featured: boolean;
    id: number;
}) => void;
export declare const createSearch: ({ connection, query, type, auth }: {
    connection: Connection;
    auth?: string | undefined;
    type: SearchType;
    query: string;
}) => void;
export declare const createLockPost: ({ auth, connection, id, locked }: {
    connection: Connection;
    auth: string;
    locked: boolean;
    id: number;
}) => void;
export declare const getRemovedPosts: (connection: Connection, auth?: string) => void;
export declare const getLockedPosts: (connection: Connection, auth?: string) => void;
export declare const getFeaturedPosts: (connection: Connection, auth?: string) => void;
export declare const getRemovedComments: (connection: Connection, auth?: string) => void;
export declare const getRemovedCommunities: (connection: Connection, auth?: string) => void;
export declare const getBansFromCommunities: (connection: Connection, auth?: string) => void;
export declare const getModsAddedToCommunities: (connection: Connection, auth?: string) => void;
export declare const getModsTransferringCommunities: (connection: Connection, auth?: string) => void;
export declare const getAddedAdmins: (connection: Connection, auth?: string) => void;
export declare const getBansFromSite: (connection: Connection, auth?: string) => void;
