import { AddAdmin } from "./types/AddAdmin";
import { AddModToCommunity } from "./types/AddModToCommunity";
import { ApproveRegistrationApplication } from "./types/ApproveRegistrationApplication";
import { BanFromCommunity } from "./types/BanFromCommunity";
import { BanPerson } from "./types/BanPerson";
import { BlockCommunity } from "./types/BlockCommunity";
import { BlockPerson } from "./types/BlockPerson";
import { ChangePassword } from "./types/ChangePassword";
import { CommunityJoin } from "./types/CommunityJoin";
import { CreateComment } from "./types/CreateComment";
import { CreateCommentLike } from "./types/CreateCommentLike";
import { CreateCommentReport } from "./types/CreateCommentReport";
import { CreateCommunity } from "./types/CreateCommunity";
import { CreateCustomEmoji } from "./types/CreateCustomEmoji";
import { CreatePost } from "./types/CreatePost";
import { CreatePostLike } from "./types/CreatePostLike";
import { CreatePostReport } from "./types/CreatePostReport";
import { CreatePrivateMessage } from "./types/CreatePrivateMessage";
import { CreatePrivateMessageReport } from "./types/CreatePrivateMessageReport";
import { CreateSite } from "./types/CreateSite";
import { DeleteAccount } from "./types/DeleteAccount";
import { DeleteComment } from "./types/DeleteComment";
import { DeleteCommunity } from "./types/DeleteCommunity";
import { DeleteCustomEmoji } from "./types/DeleteCustomEmoji";
import { DeletePost } from "./types/DeletePost";
import { DeletePrivateMessage } from "./types/DeletePrivateMessage";
import { EditComment } from "./types/EditComment";
import { EditCommunity } from "./types/EditCommunity";
import { EditCustomEmoji } from "./types/EditCustomEmoji";
import { EditPost } from "./types/EditPost";
import { EditPrivateMessage } from "./types/EditPrivateMessage";
import { EditSite } from "./types/EditSite";
import { FeaturePost } from "./types/FeaturePost";
import { FollowCommunity } from "./types/FollowCommunity";
import { GetBannedPersons } from "./types/GetBannedPersons";
import { GetCaptcha } from "./types/GetCaptcha";
import { GetComment } from "./types/GetComment";
import { GetComments } from "./types/GetComments";
import { GetCommunity } from "./types/GetCommunity";
import { GetFederatedInstances } from "./types/GetFederatedInstances";
import { GetModlog } from "./types/GetModlog";
import { GetPersonDetails } from "./types/GetPersonDetails";
import { GetPersonMentions } from "./types/GetPersonMentions";
import { GetPost } from "./types/GetPost";
import { GetPosts } from "./types/GetPosts";
import { GetPrivateMessages } from "./types/GetPrivateMessages";
import { GetReplies } from "./types/GetReplies";
import { GetReportCount } from "./types/GetReportCount";
import { GetSite } from "./types/GetSite";
import { GetSiteMetadata } from "./types/GetSiteMetadata";
import { GetUnreadCount } from "./types/GetUnreadCount";
import { GetUnreadRegistrationApplicationCount } from "./types/GetUnreadRegistrationApplicationCount";
import { LeaveAdmin } from "./types/LeaveAdmin";
import { ListCommentReports } from "./types/ListCommentReports";
import { ListCommunities } from "./types/ListCommunities";
import { ListPostReports } from "./types/ListPostReports";
import { ListPrivateMessageReports } from "./types/ListPrivateMessageReports";
import { ListRegistrationApplications } from "./types/ListRegistrationApplications";
import { LockPost } from "./types/LockPost";
import { Login } from "./types/Login";
import { MarkAllAsRead } from "./types/MarkAllAsRead";
import { MarkCommentReplyAsRead } from "./types/MarkCommentReplyAsRead";
import { MarkPersonMentionAsRead } from "./types/MarkPersonMentionAsRead";
import { MarkPostAsRead } from "./types/MarkPostAsRead";
import { MarkPrivateMessageAsRead } from "./types/MarkPrivateMessageAsRead";
import { UserOperation } from "./types/others";
import { PasswordChangeAfterReset } from "./types/PasswordChangeAfterReset";
import { PasswordReset } from "./types/PasswordReset";
import { PostJoin } from "./types/PostJoin";
import { PurgeComment } from "./types/PurgeComment";
import { PurgeCommunity } from "./types/PurgeCommunity";
import { PurgePerson } from "./types/PurgePerson";
import { PurgePost } from "./types/PurgePost";
import { Register } from "./types/Register";
import { RemoveComment } from "./types/RemoveComment";
import { RemoveCommunity } from "./types/RemoveCommunity";
import { RemovePost } from "./types/RemovePost";
import { ResolveCommentReport } from "./types/ResolveCommentReport";
import { ResolveObject } from "./types/ResolveObject";
import { ResolvePostReport } from "./types/ResolvePostReport";
import { ResolvePrivateMessageReport } from "./types/ResolvePrivateMessageReport";
import { SaveComment } from "./types/SaveComment";
import { SavePost } from "./types/SavePost";
import { SaveUserSettings } from "./types/SaveUserSettings";
import { Search } from "./types/Search";
import { TransferCommunity } from "./types/TransferCommunity";
import { UserJoin } from "./types/UserJoin";
import { VerifyEmail } from "./types/VerifyEmail";
/**
 * Helps build lemmy websocket message requests, that you can use in your Websocket sends.
 *
 * You'll receive back a [[WebSocketResponse]].
 *
 * The return types for these are given in [[LemmyHttp]]
 */
export declare class LemmyWebsocket {
    constructor();
    /**
     * Log into lemmy.
     */
    login(form: Login): string;
    /**
     * A websocket join for your user.
     *
     * Allows your user to receive private messages and notifications.
     */
    userJoin(form: UserJoin): string;
    /**
     * A websocket join for the current post room.
     *
     * Allows your user to receive new comments and updates for that post.
     */
    postJoin(form: PostJoin): string;
    /**
     * A websocket join for a given community.
     *
     * Allows your user to receive community updates.
     *
     * Note: community_id: 0, is your front page.
     */
    communityJoin(form: CommunityJoin): string;
    /**
     * Register a new user.
     */
    register(register: Register): string;
    /**
     * Fetch a Captcha.
     */
    getCaptcha(form: GetCaptcha): string;
    /**
     * Create a new community.
     */
    createCommunity(form: CreateCommunity): string;
    /**
     * Edit a community.
     */
    editCommunity(form: EditCommunity): string;
    /**
     * Delete a community.
     */
    deleteCommunity(form: DeleteCommunity): string;
    /**
     * A moderator remove for a community.
     */
    removeCommunity(form: RemoveCommunity): string;
    /**
     * Follow / subscribe to a community.
     */
    followCommunity(form: FollowCommunity): string;
    /**
     * List communities, with various filters.
     */
    listCommunities(form: ListCommunities): string;
    /**
     * Create a post.
     */
    createPost(form: CreatePost): string;
    /**
     * Get / fetch a post.
     */
    getPost(form: GetPost): string;
    /**
     * Get / fetch a community.
     */
    getCommunity(form: GetCommunity): string;
    /**
     * Create a comment.
     */
    createComment(form: CreateComment): string;
    /**
     * Edit a comment.
     */
    editComment(form: EditComment): string;
    /**
     * Delete a comment.
     */
    deleteComment(form: DeleteComment): string;
    /**
     * A moderator remove for a comment.
     */
    removeComment(form: RemoveComment): string;
    /**
     * Mark a comment as read.
     */
    markCommentReplyAsRead(form: MarkCommentReplyAsRead): string;
    /**
     * Like / vote on a comment.
     */
    likeComment(form: CreateCommentLike): string;
    /**
     * Save a comment.
     */
    saveComment(form: SaveComment): string;
    /**
     * Report a comment.
     */
    createCommentReport(form: CreateCommentReport): string;
    /**
     * Resolve a comment report. Only a mod can do this.
     */
    resolveCommentReport(form: ResolveCommentReport): string;
    /**
     * List comment reports.
     */
    listCommentReports(form: ListCommentReports): string;
    /**
     * Get / fetch posts, with various filters.
     */
    getPosts(form: GetPosts): string;
    /**
     * Get / fetch comments.
     */
    getComments(form: GetComments): string;
    /**
     * Get / fetch comment.
     */
    getComment(form: GetComment): string;
    /**
     * Like / vote on a post.
     */
    likePost(form: CreatePostLike): string;
    /**
     * Edit a post.
     */
    editPost(form: EditPost): string;
    /**
     * Delete a post.
     */
    deletePost(form: DeletePost): string;
    /**
     * A moderator remove for a post.
     */
    removePost(form: RemovePost): string;
    /**
     * A moderator can lock a post ( IE disable new comments ).
     */
    lockPost(form: LockPost): string;
    /**
     * A moderator can feature a post ( IE stick it to the top of a community ).
     */
    featurePost(form: FeaturePost): string;
    /**
     * Mark a post as read.
     */
    markPostAsRead(form: MarkPostAsRead): string;
    /**
     * Save a post.
     */
    savePost(form: SavePost): string;
    /**
     * Report a post.
     */
    createPostReport(form: CreatePostReport): string;
    /**
     * Resolve a post report. Only a mod can do this.
     */
    resolvePostReport(form: ResolvePostReport): string;
    /**
     * List post reports.
     */
    listPostReports(form: ListPostReports): string;
    /**
     * Fetch metadata for any given site.
     */
    getSiteMetadata(form: GetSiteMetadata): string;
    /**
     * Ban a user from a community.
     */
    banFromCommunity(form: BanFromCommunity): string;
    /**
     * Add a moderator to your community.
     */
    addModToCommunity(form: AddModToCommunity): string;
    /**
     * Transfer your community to an existing moderator.
     */
    transferCommunity(form: TransferCommunity): string;
    /**
     * Leave the Site admins.
     */
    leaveAdmin(form: LeaveAdmin): string;
    /**
     * Ban a person from your site.
     */
    banPerson(form: BanPerson): string;
    /**
     * Get a list of banned users
     */
    getBannedPersons(form: GetBannedPersons): string;
    /**
     * Add an admin to your site.
     */
    addAdmin(form: AddAdmin): string;
    /**
     * Get the unread registration applications count.
     */
    getUnreadRegistrationApplicationCount(form: GetUnreadRegistrationApplicationCount): string;
    /**
     * List the unread registration applications.
     */
    listRegistrationApplications(form: ListRegistrationApplications): string;
    /**
     * Approve a registration application
     */
    approveRegistrationApplication(form: ApproveRegistrationApplication): string;
    /**
     * Get the details for a person.
     */
    getPersonDetails(form: GetPersonDetails): string;
    /**
     * Get comment replies.
     */
    getReplies(form: GetReplies): string;
    /**
     * Get mentions for your user.
     */
    getPersonMentions(form: GetPersonMentions): string;
    /**
     * Mark a person mention as read.
     */
    markPersonMentionAsRead(form: MarkPersonMentionAsRead): string;
    /**
     * Get the modlog.
     */
    getModlog(form: GetModlog): string;
    /**
     * Create your site.
     */
    createSite(form: CreateSite): string;
    /**
     * Edit your site.
     */
    editSite(form: EditSite): string;
    /**
     * Gets the site, and your user data.
     */
    getSite(form: GetSite): string;
    /**
     * Search lemmy.
     */
    search(form: Search): string;
    /**
     * Fetch a non-local / federated object.
     */
    resolveObject(form: ResolveObject): string;
    /**
     * Mark all replies as read.
     */
    markAllAsRead(form: MarkAllAsRead): string;
    /**
     * Save your user settings.
     */
    saveUserSettings(form: SaveUserSettings): string;
    /**
     * Change your user password.
     */
    changePassword(form: ChangePassword): string;
    /**
     * Get counts for your reports
     */
    getReportCount(form: GetReportCount): string;
    /**
     * Get your unread counts
     */
    getUnreadCount(form: GetUnreadCount): string;
    /**
     * Verify your email
     */
    verifyEmail(form: VerifyEmail): string;
    /**
     * Delete your account.
     */
    deleteAccount(form: DeleteAccount): string;
    /**
     * Reset your password.
     */
    passwordReset(form: PasswordReset): string;
    /**
     * Change your password from an email / token based reset.
     */
    passwordChange(form: PasswordChangeAfterReset): string;
    /**
     * Create a private message.
     */
    createPrivateMessage(form: CreatePrivateMessage): string;
    /**
     * Edit a private message.
     */
    editPrivateMessage(form: EditPrivateMessage): string;
    /**
     * Delete a private message.
     */
    deletePrivateMessage(form: DeletePrivateMessage): string;
    /**
     * Mark a private message as read.
     */
    markPrivateMessageAsRead(form: MarkPrivateMessageAsRead): string;
    /**
     * Get / fetch private messages.
     */
    getPrivateMessages(form: GetPrivateMessages): string;
    /**
     * Create a report for a private message.
     */
    createPrivateMessageReport(form: CreatePrivateMessageReport): string;
    /**
     * Resolve a report for a private message.
     */
    resolvePrivateMessageReport(form: ResolvePrivateMessageReport): string;
    /**
     * List private message reports.
     */
    listPrivateMessageReports(form: ListPrivateMessageReports): string;
    /**
     * Block a person.
     */
    blockPerson(form: BlockPerson): string;
    /**
     * Block a community.
     */
    blockCommunity(form: BlockCommunity): string;
    /**
     * Purge / Delete a person from the database.
     */
    purgePerson(form: PurgePerson): string;
    /**
     * Purge / Delete a community from the database.
     */
    purgeCommunity(form: PurgeCommunity): string;
    /**
     * Purge / Delete a post from the database.
     */
    purgePost(form: PurgePost): string;
    /**
     * Purge / Delete a comment from the database.
     */
    purgeComment(form: PurgeComment): string;
    /**
     * Create a custom emoji
     */
    createCustomEmoji(form: CreateCustomEmoji): string;
    /**
     * Edit a custom emoji
     */
    editCustomEmoji(form: EditCustomEmoji): string;
    /**
     * Delete a custom emoji
     */
    deleteCustomEmoji(form: DeleteCustomEmoji): string;
    /**
     * Fetch federated instances.
     */
    getFederatedInstances(form: GetFederatedInstances): string;
}
export declare function wsUserOp(msg: any): UserOperation;
/**
 * Converts a websocket string response to a usable result
 */
export declare function wsJsonToRes<ResponseType>(msg: any): ResponseType;
