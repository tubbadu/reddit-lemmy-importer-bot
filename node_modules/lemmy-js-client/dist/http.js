"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LemmyHttp = void 0;
var cross_fetch_1 = __importDefault(require("cross-fetch"));
var form_data_1 = __importDefault(require("form-data"));
var others_1 = require("./types/others");
// @ts-ignore
BigInt.prototype["toJSON"] = function () {
    return parseInt(this.toString());
};
var HttpType;
(function (HttpType) {
    HttpType["Get"] = "GET";
    HttpType["Post"] = "POST";
    HttpType["Put"] = "PUT";
})(HttpType || (HttpType = {}));
/**
 * Helps build lemmy HTTP requests.
 */
var LemmyHttp = /** @class */ (function () {
    /**
     * Generates a new instance of LemmyHttp.
     * @param baseUrl the base url, without the vX version: https://lemmy.ml -> goes to https://lemmy.ml/api/vX
     * @param headers optional headers. Should contain `x-real-ip` and `x-forwarded-for` .
     */
    function LemmyHttp(baseUrl, headers) {
        this.headers = {};
        this.apiUrl = "".concat(baseUrl, "/api/").concat(others_1.VERSION);
        this.pictrsUrl = "".concat(baseUrl, "/pictrs/image");
        if (headers) {
            this.headers = headers;
        }
    }
    /**
     * Gets the site, and your user data.
     *
     * `HTTP.GET /site`
     */
    LemmyHttp.prototype.getSite = function (form) {
        return this.wrapper(HttpType.Get, "/site", form);
    };
    /**
     * Create your site.
     *
     * `HTTP.POST /site`
     */
    LemmyHttp.prototype.createSite = function (form) {
        return this.wrapper(HttpType.Post, "/site", form);
    };
    /**
     * Edit your site.
     *
     * `HTTP.PUT /site`
     */
    LemmyHttp.prototype.editSite = function (form) {
        return this.wrapper(HttpType.Put, "/site", form);
    };
    /**
     * Leave the Site admins.
     *
     * `HTTP.POST /user/leave_admin`
     */
    LemmyHttp.prototype.leaveAdmin = function (form) {
        return this.wrapper(HttpType.Post, "/user/leave_admin", form);
    };
    /**
     * Get the modlog.
     *
     * `HTTP.GET /modlog`
     */
    LemmyHttp.prototype.getModlog = function (form) {
        return this.wrapper(HttpType.Get, "/modlog", form);
    };
    /**
     * Search lemmy.
     *
     * `HTTP.GET /search`
     */
    LemmyHttp.prototype.search = function (form) {
        return this.wrapper(HttpType.Get, "/search", form);
    };
    /**
     * Fetch a non-local / federated object.
     *
     * `HTTP.GET /resolve_object`
     */
    LemmyHttp.prototype.resolveObject = function (form) {
        return this.wrapper(HttpType.Get, "/resolve_object", form);
    };
    /**
     * Create a new community.
     *
     * `HTTP.POST /community`
     */
    LemmyHttp.prototype.createCommunity = function (form) {
        return this.wrapper(HttpType.Post, "/community", form);
    };
    /**
     * Get / fetch a community.
     *
     * `HTTP.GET /community`
     */
    LemmyHttp.prototype.getCommunity = function (form) {
        return this.wrapper(HttpType.Get, "/community", form);
    };
    /**
     * Edit a community.
     *
     * `HTTP.PUT /community`
     */
    LemmyHttp.prototype.editCommunity = function (form) {
        return this.wrapper(HttpType.Put, "/community", form);
    };
    /**
     * List communities, with various filters.
     *
     * `HTTP.GET /community/list`
     */
    LemmyHttp.prototype.listCommunities = function (form) {
        return this.wrapper(HttpType.Get, "/community/list", form);
    };
    /**
     * Follow / subscribe to a community.
     *
     * `HTTP.POST /community/follow`
     */
    LemmyHttp.prototype.followCommunity = function (form) {
        return this.wrapper(HttpType.Post, "/community/follow", form);
    };
    /**
     * Block a community.
     *
     * `HTTP.POST /community/block`
     */
    LemmyHttp.prototype.blockCommunity = function (form) {
        return this.wrapper(HttpType.Post, "/community/block", form);
    };
    /**
     * Delete a community.
     *
     * `HTTP.POST /community/delete`
     */
    LemmyHttp.prototype.deleteCommunity = function (form) {
        return this.wrapper(HttpType.Post, "/community/delete", form);
    };
    /**
     * A moderator remove for a community.
     *
     * `HTTP.POST /community/remove`
     */
    LemmyHttp.prototype.removeCommunity = function (form) {
        return this.wrapper(HttpType.Post, "/community/remove", form);
    };
    /**
     * Transfer your community to an existing moderator.
     *
     * `HTTP.POST /community/transfer`
     */
    LemmyHttp.prototype.transferCommunity = function (form) {
        return this.wrapper(HttpType.Post, "/community/transfer", form);
    };
    /**
     * Ban a user from a community.
     *
     * `HTTP.POST /community/ban_user`
     */
    LemmyHttp.prototype.banFromCommunity = function (form) {
        return this.wrapper(HttpType.Post, "/community/ban_user", form);
    };
    /**
     * Add a moderator to your community.
     *
     * `HTTP.POST /community/mod`
     */
    LemmyHttp.prototype.addModToCommunity = function (form) {
        return this.wrapper(HttpType.Post, "/community/mod", form);
    };
    /**
     * Create a post.
     *
     * `HTTP.POST /post`
     */
    LemmyHttp.prototype.createPost = function (form) {
        return this.wrapper(HttpType.Post, "/post", form);
    };
    /**
     * Get / fetch a post.
     *
     * `HTTP.GET /post`
     */
    LemmyHttp.prototype.getPost = function (form) {
        return this.wrapper(HttpType.Get, "/post", form);
    };
    /**
     * Edit a post.
     *
     * `HTTP.PUT /post`
     */
    LemmyHttp.prototype.editPost = function (form) {
        return this.wrapper(HttpType.Put, "/post", form);
    };
    /**
     * Delete a post.
     *
     * `HTTP.POST /post/delete`
     */
    LemmyHttp.prototype.deletePost = function (form) {
        return this.wrapper(HttpType.Post, "/post/delete", form);
    };
    /**
     * A moderator remove for a post.
     *
     * `HTTP.POST /post/remove`
     */
    LemmyHttp.prototype.removePost = function (form) {
        return this.wrapper(HttpType.Post, "/post/remove", form);
    };
    /**
     * Mark a post as read.
     *
     * `HTTP.POST /post/mark_as_read`
     */
    LemmyHttp.prototype.markPostAsRead = function (form) {
        return this.wrapper(HttpType.Post, "/post/mark_as_read", form);
    };
    /**
     * A moderator can lock a post ( IE disable new comments ).
     *
     * `HTTP.POST /post/lock`
     */
    LemmyHttp.prototype.lockPost = function (form) {
        return this.wrapper(HttpType.Post, "/post/lock", form);
    };
    /**
     * A moderator can feature a community post ( IE stick it to the top of a community ).
     *
     * `HTTP.POST /post/feature`
     */
    LemmyHttp.prototype.featurePost = function (form) {
        return this.wrapper(HttpType.Post, "/post/feature", form);
    };
    /**
     * Get / fetch posts, with various filters.
     *
     * `HTTP.GET /post/list`
     */
    LemmyHttp.prototype.getPosts = function (form) {
        return this.wrapper(HttpType.Get, "/post/list", form);
    };
    /**
     * Like / vote on a post.
     *
     * `HTTP.POST /post/like`
     */
    LemmyHttp.prototype.likePost = function (form) {
        return this.wrapper(HttpType.Post, "/post/like", form);
    };
    /**
     * Save a post.
     *
     * `HTTP.PUT /post/save`
     */
    LemmyHttp.prototype.savePost = function (form) {
        return this.wrapper(HttpType.Put, "/post/save", form);
    };
    /**
     * Report a post.
     *
     * `HTTP.POST /post/report`
     */
    LemmyHttp.prototype.createPostReport = function (form) {
        return this.wrapper(HttpType.Post, "/post/report", form);
    };
    /**
     * Resolve a post report. Only a mod can do this.
     *
     * `HTTP.PUT /post/report/resolve`
     */
    LemmyHttp.prototype.resolvePostReport = function (form) {
        return this.wrapper(HttpType.Put, "/post/report/resolve", form);
    };
    /**
     * List post reports.
     *
     * `HTTP.GET /post/report/list`
     */
    LemmyHttp.prototype.listPostReports = function (form) {
        return this.wrapper(HttpType.Get, "/post/report/list", form);
    };
    /**
     * Fetch metadata for any given site.
     *
     * `HTTP.GET /post/site_metadata`
     */
    LemmyHttp.prototype.getSiteMetadata = function (form) {
        return this.wrapper(HttpType.Get, "/post/site_metadata", form);
    };
    /**
     * Create a comment.
     *
     * `HTTP.POST /comment`
     */
    LemmyHttp.prototype.createComment = function (form) {
        return this.wrapper(HttpType.Post, "/comment", form);
    };
    /**
     * Edit a comment.
     *
     * `HTTP.PUT /comment`
     */
    LemmyHttp.prototype.editComment = function (form) {
        return this.wrapper(HttpType.Put, "/comment", form);
    };
    /**
     * Delete a comment.
     *
     * `HTTP.POST /comment/delete`
     */
    LemmyHttp.prototype.deleteComment = function (form) {
        return this.wrapper(HttpType.Post, "/comment/delete", form);
    };
    /**
     * A moderator remove for a comment.
     *
     * `HTTP.POST /comment/remove`
     */
    LemmyHttp.prototype.removeComment = function (form) {
        return this.wrapper(HttpType.Post, "/comment/remove", form);
    };
    /**
     * Mark a comment as read.
     *
     * `HTTP.POST /comment/mark_as_read`
     */
    LemmyHttp.prototype.markCommentReplyAsRead = function (form) {
        return this.wrapper(HttpType.Post, "/comment/mark_as_read", form);
    };
    /**
     * Like / vote on a comment.
     *
     * `HTTP.POST /comment/like`
     */
    LemmyHttp.prototype.likeComment = function (form) {
        return this.wrapper(HttpType.Post, "/comment/like", form);
    };
    /**
     * Save a comment.
     *
     * `HTTP.PUT /comment/save`
     */
    LemmyHttp.prototype.saveComment = function (form) {
        return this.wrapper(HttpType.Put, "/comment/save", form);
    };
    /**
     * Get / fetch comments.
     *
     * `HTTP.GET /comment/list`
     */
    LemmyHttp.prototype.getComments = function (form) {
        return this.wrapper(HttpType.Get, "/comment/list", form);
    };
    /**
     * Get / fetch comment.
     *
     * `HTTP.GET /comment`
     */
    LemmyHttp.prototype.getComment = function (form) {
        return this.wrapper(HttpType.Get, "/comment", form);
    };
    /**
     * Report a comment.
     *
     * `HTTP.POST /comment/report`
     */
    LemmyHttp.prototype.createCommentReport = function (form) {
        return this.wrapper(HttpType.Post, "/comment/report", form);
    };
    /**
     * Resolve a comment report. Only a mod can do this.
     *
     * `HTTP.PUT /comment/report/resolve`
     */
    LemmyHttp.prototype.resolveCommentReport = function (form) {
        return this.wrapper(HttpType.Put, "/comment/report/resolve", form);
    };
    /**
     * List comment reports.
     *
     * `HTTP.GET /comment/report/list`
     */
    LemmyHttp.prototype.listCommentReports = function (form) {
        return this.wrapper(HttpType.Get, "/comment/report/list", form);
    };
    /**
     * Get / fetch private messages.
     *
     * `HTTP.GET /private_message/list`
     */
    LemmyHttp.prototype.getPrivateMessages = function (form) {
        return this.wrapper(HttpType.Get, "/private_message/list", form);
    };
    /**
     * Create a private message.
     *
     * `HTTP.POST /private_message`
     */
    LemmyHttp.prototype.createPrivateMessage = function (form) {
        return this.wrapper(HttpType.Post, "/private_message", form);
    };
    /**
     * Edit a private message.
     *
     * `HTTP.PUT /private_message`
     */
    LemmyHttp.prototype.editPrivateMessage = function (form) {
        return this.wrapper(HttpType.Put, "/private_message", form);
    };
    /**
     * Delete a private message.
     *
     * `HTTP.POST /private_message/delete`
     */
    LemmyHttp.prototype.deletePrivateMessage = function (form) {
        return this.wrapper(HttpType.Post, "/private_message/delete", form);
    };
    /**
     * Mark a private message as read.
     *
     * `HTTP.POST /private_message/mark_as_read`
     */
    LemmyHttp.prototype.markPrivateMessageAsRead = function (form) {
        return this.wrapper(HttpType.Post, "/private_message/mark_as_read", form);
    };
    /**
     * Create a report for a private message.
     *
     * `HTTP.POST /private_message/report`
     */
    LemmyHttp.prototype.createPrivateMessageReport = function (form) {
        return this.wrapper(HttpType.Post, "/private_message/report", form);
    };
    /**
     * Resolve a report for a private message.
     *
     * `HTTP.PUT /private_message/report/resolve`
     */
    LemmyHttp.prototype.resolvePrivateMessageReport = function (form) {
        return this.wrapper(HttpType.Put, "/private_message/report/resolve", form);
    };
    /**
     * List private message reports.
     *
     * `HTTP.GET /private_message/report/list`
     */
    LemmyHttp.prototype.listPrivateMessageReports = function (form) {
        return this.wrapper(HttpType.Get, "/private_message/report/list", form);
    };
    /**
     * Register a new user.
     *
     * `HTTP.POST /user/register`
     */
    LemmyHttp.prototype.register = function (form) {
        return this.wrapper(HttpType.Post, "/user/register", form);
    };
    /**
     * Log into lemmy.
     *
     * `HTTP.POST /user/login`
     */
    LemmyHttp.prototype.login = function (form) {
        return this.wrapper(HttpType.Post, "/user/login", form);
    };
    /**
     * Get the details for a person.
     *
     * `HTTP.GET /user`
     */
    LemmyHttp.prototype.getPersonDetails = function (form) {
        return this.wrapper(HttpType.Get, "/user", form);
    };
    /**
     * Get mentions for your user.
     *
     * `HTTP.GET /user/mention`
     */
    LemmyHttp.prototype.getPersonMentions = function (form) {
        return this.wrapper(HttpType.Get, "/user/mention", form);
    };
    /**
     * Mark a person mention as read.
     *
     * `HTTP.POST /user/mention/mark_as_read`
     */
    LemmyHttp.prototype.markPersonMentionAsRead = function (form) {
        return this.wrapper(HttpType.Post, "/user/mention/mark_as_read", form);
    };
    /**
     * Get comment replies.
     *
     * `HTTP.GET /user/replies`
     */
    LemmyHttp.prototype.getReplies = function (form) {
        return this.wrapper(HttpType.Get, "/user/replies", form);
    };
    /**
     * Ban a person from your site.
     *
     * `HTTP.POST /user/ban`
     */
    LemmyHttp.prototype.banPerson = function (form) {
        return this.wrapper(HttpType.Post, "/user/ban", form);
    };
    /**
     * Get a list of banned users
     *
     * `HTTP.GET /user/banned`
     */
    LemmyHttp.prototype.getBannedPersons = function (form) {
        return this.wrapper(HttpType.Get, "/user/banned", form);
    };
    /**
     * Block a person.
     *
     * `HTTP.POST /user/block`
     */
    LemmyHttp.prototype.blockPerson = function (form) {
        return this.wrapper(HttpType.Post, "/user/block", form);
    };
    /**
     * Fetch a Captcha.
     *
     * `HTTP.GET /user/get_captcha`
     */
    LemmyHttp.prototype.getCaptcha = function (form) {
        return this.wrapper(HttpType.Get, "/user/get_captcha", form);
    };
    /**
     * Delete your account.
     *
     * `HTTP.POST /user/delete_account`
     */
    LemmyHttp.prototype.deleteAccount = function (form) {
        return this.wrapper(HttpType.Post, "/user/delete_account", form);
    };
    /**
     * Reset your password.
     *
     * `HTTP.POST /user/password_reset`
     */
    LemmyHttp.prototype.passwordReset = function (form) {
        return this.wrapper(HttpType.Post, "/user/password_reset", form);
    };
    /**
     * Change your password from an email / token based reset.
     *
     * `HTTP.POST /user/password_change`
     */
    LemmyHttp.prototype.passwordChangeAfterReset = function (form) {
        return this.wrapper(HttpType.Post, "/user/password_change", form);
    };
    /**
     * Mark all replies as read.
     *
     * `HTTP.POST /user/mark_all_as_read`
     */
    LemmyHttp.prototype.markAllAsRead = function (form) {
        return this.wrapper(HttpType.Post, "/user/mark_all_as_read", form);
    };
    /**
     * Save your user settings.
     *
     * `HTTP.PUT /user/save_user_settings`
     */
    LemmyHttp.prototype.saveUserSettings = function (form) {
        return this.wrapper(HttpType.Put, "/user/save_user_settings", form);
    };
    /**
     * Change your user password.
     *
     * `HTTP.PUT /user/change_password`
     */
    LemmyHttp.prototype.changePassword = function (form) {
        return this.wrapper(HttpType.Put, "/user/change_password", form);
    };
    /**
     * Get counts for your reports
     *
     * `HTTP.GET /user/report_count`
     */
    LemmyHttp.prototype.getReportCount = function (form) {
        return this.wrapper(HttpType.Get, "/user/report_count", form);
    };
    /**
     * Get your unread counts
     *
     * `HTTP.GET /user/unread_count`
     */
    LemmyHttp.prototype.getUnreadCount = function (form) {
        return this.wrapper(HttpType.Get, "/user/unread_count", form);
    };
    /**
     * Verify your email
     *
     * `HTTP.POST /user/verify_email`
     */
    LemmyHttp.prototype.verifyEmail = function (form) {
        return this.wrapper(HttpType.Post, "/user/verify_email", form);
    };
    /**
     * Add an admin to your site.
     *
     * `HTTP.POST /admin/add`
     */
    LemmyHttp.prototype.addAdmin = function (form) {
        return this.wrapper(HttpType.Post, "/admin/add", form);
    };
    /**
     * Get the unread registration applications count.
     *
     * `HTTP.GET /admin/registration_application/count`
     */
    LemmyHttp.prototype.getUnreadRegistrationApplicationCount = function (form) {
        return this.wrapper(HttpType.Get, "/admin/registration_application/count", form);
    };
    /**
     * List the registration applications.
     *
     * `HTTP.GET /admin/registration_application/list`
     */
    LemmyHttp.prototype.listRegistrationApplications = function (form) {
        return this.wrapper(HttpType.Get, "/admin/registration_application/list", form);
    };
    /**
     * Approve a registration application
     *
     * `HTTP.PUT /admin/registration_application/approve`
     */
    LemmyHttp.prototype.approveRegistrationApplication = function (form) {
        return this.wrapper(HttpType.Put, "/admin/registration_application/approve", form);
    };
    /**
     * Purge / Delete a person from the database.
     *
     * `HTTP.POST /admin/purge/person`
     */
    LemmyHttp.prototype.purgePerson = function (form) {
        return this.wrapper(HttpType.Post, "/admin/purge/person", form);
    };
    /**
     * Purge / Delete a community from the database.
     *
     * `HTTP.POST /admin/purge/community`
     */
    LemmyHttp.prototype.purgeCommunity = function (form) {
        return this.wrapper(HttpType.Post, "/admin/purge/community", form);
    };
    /**
     * Purge / Delete a post from the database.
     *
     * `HTTP.POST /admin/purge/post`
     */
    LemmyHttp.prototype.purgePost = function (form) {
        return this.wrapper(HttpType.Post, "/admin/purge/post", form);
    };
    /**
     * Purge / Delete a comment from the database.
     *
     * `HTTP.POST /admin/purge/comment`
     */
    LemmyHttp.prototype.purgeComment = function (form) {
        return this.wrapper(HttpType.Post, "/admin/purge/comment", form);
    };
    /**
     * Create a new custom emoji
     *
     * `HTTP.POST /custom_emoji`
     */
    LemmyHttp.prototype.createCustomEmoji = function (form) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.wrapper(HttpType.Post, "/custom_emoji", form)];
            });
        });
    };
    /**
     * Edit an existing custom emoji
     *
     * `HTTP.PUT /custom_emoji`
     */
    LemmyHttp.prototype.editCustomEmoji = function (form) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.wrapper(HttpType.Put, "/custom_emoji", form)];
            });
        });
    };
    /**
     * Delete a custom emoji
     *
     * `HTTP.Post /custom_emoji/delete`
     */
    LemmyHttp.prototype.deleteCustomEmoji = function (form) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.wrapper(HttpType.Post, "/custom_emoji/delete", form)];
            });
        });
    };
    /**
     * Fetch federated instances.
     *
     * `HTTP.Get /federated_instances`
     */
    LemmyHttp.prototype.getFederatedInstances = function (form) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.wrapper(HttpType.Get, "/federated_instances", form)];
            });
        });
    };
    /**
     * Upload an image to the server.
     */
    LemmyHttp.prototype.uploadImage = function (_a) {
        var _b, _c, _d, _e;
        var image = _a.image, auth = _a.auth;
        return __awaiter(this, void 0, void 0, function () {
            var formData, headers, url, delete_url, response, responseJson, _f, hash, deleteToken;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        formData = createFormData(image);
                        headers = {};
                        if (!((_c = (_b = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) === null || _b === void 0 ? void 0 : _b.cookie) === null || _c === void 0 ? void 0 : _c.includes("jwt=")) &&
                            !((_e = (_d = this.headers) === null || _d === void 0 ? void 0 : _d.Cookie) === null || _e === void 0 ? void 0 : _e.includes("jwt="))) {
                            headers.Cookie = "jwt=".concat(auth);
                        }
                        url = undefined;
                        delete_url = undefined;
                        return [4 /*yield*/, (0, cross_fetch_1.default)(this.pictrsUrl, {
                                method: HttpType.Post,
                                body: formData,
                                headers: __assign(__assign({}, this.headers), headers),
                            })];
                    case 1:
                        response = _g.sent();
                        return [4 /*yield*/, response.json()];
                    case 2:
                        responseJson = _g.sent();
                        if (responseJson.msg === "ok") {
                            _f = responseJson.files[0], hash = _f.file, deleteToken = _f.delete_token;
                            delete_url = "".concat(this.pictrsUrl, "/delete/").concat(deleteToken, "/").concat(hash);
                            url = "".concat(this.pictrsUrl, "/").concat(hash);
                        }
                        return [2 /*return*/, __assign(__assign({}, responseJson), { url: url, delete_url: delete_url })];
                }
            });
        });
    };
    LemmyHttp.prototype.buildFullUrl = function (endpoint) {
        return "".concat(this.apiUrl).concat(endpoint);
    };
    LemmyHttp.prototype.wrapper = function (type_, endpoint, form) {
        return __awaiter(this, void 0, void 0, function () {
            var getUrl, response, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(type_ === HttpType.Get)) return [3 /*break*/, 3];
                        getUrl = "".concat(this.buildFullUrl(endpoint), "?").concat(encodeGetParams(form));
                        return [4 /*yield*/, (0, cross_fetch_1.default)(getUrl, {
                                method: HttpType.Get,
                                headers: this.headers,
                            })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3: return [4 /*yield*/, (0, cross_fetch_1.default)(this.buildFullUrl(endpoint), {
                            method: type_,
                            headers: __assign({ "Content-Type": "application/json" }, this.headers),
                            body: JSON.stringify(form),
                        })];
                    case 4:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 5: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return LemmyHttp;
}());
exports.LemmyHttp = LemmyHttp;
function encodeGetParams(p) {
    return Object.entries(p)
        .filter(function (kv) { return !!kv[1]; })
        .map(function (kv) { return kv.map(encodeURIComponent).join("="); })
        .join("&");
}
function createFormData(image) {
    var formData = new form_data_1.default();
    if (image.constructor.name === "File") {
        formData.append("images[]", image);
    }
    else {
        // The filename doesn't affect the file type or file name that ends up in pictrs
        formData.append("images[]", image, { filename: "image.jpg" });
    }
    return formData;
}
